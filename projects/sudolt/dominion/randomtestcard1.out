Random testing of smithy card
No errors returned from cardEffect for smithy card!
5000 plays had good cardEffect returns!
5000 plays had bugs in hand count of smithy card!
0 plays had good hand counts!
5000 plays had bugs in deck count of smithy card!
0 plays had good deck counts!
Function 'smithy_card'
Lines executed:100.00% of 5

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   150000:    8:int compare(const void* a, const void* b)
        -:    9:{
   150000:   10:   if (*(int*)a > *(int*)b)
    #####:   11:      return 1;
   150000:   12:   if (*(int*)a < *(int*)b)
    40000:   13:      return -1;
   110000:   14:   return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame()
        -:   18:{
    #####:   19:   struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:   return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:   int k8, int k9, int k10)
        -:   25:{
    #####:   26:   int* k = malloc(10 * sizeof(int));
    #####:   27:   k[0] = k1;
    #####:   28:   k[1] = k2;
    #####:   29:   k[2] = k3;
    #####:   30:   k[3] = k4;
    #####:   31:   k[4] = k5;
    #####:   32:   k[5] = k6;
    #####:   33:   k[6] = k7;
    #####:   34:   k[7] = k8;
    #####:   35:   k[8] = k9;
    #####:   36:   k[9] = k10;
    #####:   37:   return k;
        -:   38:}
        -:   39:
     5000:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:   int i;
        -:   45:   int j;
        -:   46:   int it;
        -:   47:   //set up random number generator
     5000:   48:   SelectStream(1);
     5000:   49:   PutSeed((long)randomSeed);
        -:   50:
        -:   51:   //check number of players
     5000:   52:   if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:   {
    #####:   54:      return -1;
        -:   55:   }
        -:   56:
        -:   57:   //set number of players
     5000:   58:   state->numPlayers = numPlayers;
        -:   59:
        -:   60:   //check selected kingdom cards are different
    55000:   61:   for (i = 0; i < 10; i++)
        -:   62:   {
   550000:   63:      for (j = 0; j < 10; j++)
        -:   64:      {
   500000:   65:         if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:         {
    #####:   67:            return -1;
        -:   68:         }
        -:   69:      }
        -:   70:   }
        -:   71:
        -:   72:
        -:   73:   //initialize supply
        -:   74:   ///////////////////////////////
        -:   75:
        -:   76:   //set number of Curse cards
     5000:   77:   if (numPlayers == 2)
        -:   78:   {
     5000:   79:      state->supplyCount[curse] = 10;
        -:   80:   }
    #####:   81:   else if (numPlayers == 3)
        -:   82:   {
    #####:   83:      state->supplyCount[curse] = 20;
        -:   84:   }
        -:   85:   else
        -:   86:   {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:   }
        -:   89:
        -:   90:   //set number of Victory cards
     5000:   91:   if (numPlayers == 2)
        -:   92:   {
     5000:   93:      state->supplyCount[estate] = 8;
     5000:   94:      state->supplyCount[duchy] = 8;
     5000:   95:      state->supplyCount[province] = 8;
        -:   96:   }
        -:   97:   else
        -:   98:   {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:   }
        -:  103:
        -:  104:   //set number of Treasure cards
     5000:  105:   state->supplyCount[copper] = 60 - (7 * numPlayers);
     5000:  106:   state->supplyCount[silver] = 40;
     5000:  107:   state->supplyCount[gold] = 30;
        -:  108:
        -:  109:   //set number of Kingdom cards
   105000:  110:   for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  111:   {
   890000:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  113:      {
   830000:  114:         if (kingdomCards[j] == i)
        -:  115:         {
        -:  116:            //check if card is a 'Victory' Kingdom card
    40000:  117:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  118:            {
    #####:  119:               if (numPlayers == 2)
        -:  120:               {
    #####:  121:                  state->supplyCount[i] = 8;
        -:  122:               }
    #####:  123:               else { state->supplyCount[i] = 12; }
        -:  124:            }
        -:  125:            else
        -:  126:            {
    40000:  127:               state->supplyCount[i] = 10;
        -:  128:            }
    40000:  129:            break;
        -:  130:         }
        -:  131:         else    //card is not in the set choosen for the game
        -:  132:         {
   790000:  133:            state->supplyCount[i] = -1;
        -:  134:         }
        -:  135:      }
        -:  136:
        -:  137:   }
        -:  138:
        -:  139:   ////////////////////////
        -:  140:   //supply intilization complete
        -:  141:
        -:  142:   //set player decks
    15000:  143:   for (i = 0; i < numPlayers; i++)
        -:  144:   {
    10000:  145:      state->deckCount[i] = 0;
    40000:  146:      for (j = 0; j < 3; j++)
        -:  147:      {
    30000:  148:         state->deck[i][j] = estate;
    30000:  149:         state->deckCount[i]++;
        -:  150:      }
    80000:  151:      for (j = 3; j < 10; j++)
        -:  152:      {
    70000:  153:         state->deck[i][j] = copper;
    70000:  154:         state->deckCount[i]++;
        -:  155:      }
        -:  156:   }
        -:  157:
        -:  158:   //shuffle player decks
    15000:  159:   for (i = 0; i < numPlayers; i++)
        -:  160:   {
    10000:  161:      if (shuffle(i, state) < 0)
        -:  162:      {
    #####:  163:         return -1;
        -:  164:      }
        -:  165:   }
        -:  166:
        -:  167:   //draw player hands
    15000:  168:   for (i = 0; i < numPlayers; i++)
        -:  169:   {
        -:  170:      //initialize hand size to zero
    10000:  171:      state->handCount[i] = 0;
    10000:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:   }
        -:  179:
        -:  180:   //set embargo tokens to 0 for all supply piles
   140000:  181:   for (i = 0; i <= treasure_map; i++)
        -:  182:   {
   135000:  183:      state->embargoTokens[i] = 0;
        -:  184:   }
        -:  185:
        -:  186:   //initialize first player's turn
     5000:  187:   state->outpostPlayed = 0;
     5000:  188:   state->phase = 0;
     5000:  189:   state->numActions = 1;
     5000:  190:   state->numBuys = 1;
     5000:  191:   state->playedCardCount = 0;
     5000:  192:   state->whoseTurn = 0;
     5000:  193:   state->handCount[state->whoseTurn] = 0;
        -:  194:   //int it; move to top
        -:  195:
        -:  196:   //Moved draw cards to here, only drawing at the start of a turn
    30000:  197:   for (it = 0; it < 5; it++)
        -:  198:   {
    25000:  199:      drawCard(state->whoseTurn, state);
        -:  200:   }
        -:  201:
     5000:  202:   updateCoins(state->whoseTurn, state, 0);
        -:  203:
     5000:  204:   return 0;
        -:  205:}
        -:  206:
    10000:  207:int shuffle(int player, struct gameState *state)
        -:  208:{
        -:  209:
        -:  210:
        -:  211:   int newDeck[MAX_DECK];
    10000:  212:   int newDeckPos = 0;
        -:  213:   int card;
        -:  214:   int i;
        -:  215:
    10000:  216:   if (state->deckCount[player] < 1)
    #####:  217:      return -1;
    10000:  218:   qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:   /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
   120000:  221:   while (state->deckCount[player] > 0)
        -:  222:   {
   100000:  223:      card = floor(Random() * state->deckCount[player]);
   100000:  224:      newDeck[newDeckPos] = state->deck[player][card];
   100000:  225:      newDeckPos++;
   325229:  226:      for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:      {
   225229:  228:         state->deck[player][i] = state->deck[player][i + 1];
        -:  229:      }
   100000:  230:      state->deckCount[player]--;
        -:  231:   }
   110000:  232:   for (i = 0; i < newDeckPos; i++)
        -:  233:   {
   100000:  234:      state->deck[player][i] = newDeck[i];
   100000:  235:      state->deckCount[player]++;
        -:  236:   }
        -:  237:
    10000:  238:   return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:   int card;
    #####:  244:   int coin_bonus = 0; 		//tracks coins gain from actions
        -:  245:
        -:  246:   //check if it is the right phase
    #####:  247:   if (state->phase != 0)
        -:  248:   {
    #####:  249:      return -1;
        -:  250:   }
        -:  251:
        -:  252:   //check if player has enough actions
    #####:  253:   if (state->numActions < 1)
        -:  254:   {
    #####:  255:      return -1;
        -:  256:   }
        -:  257:
        -:  258:   //get card played
    #####:  259:   card = handCard(handPos, state);
        -:  260:
        -:  261:   //check if selected card is an action
    #####:  262:   if (card < adventurer || card > treasure_map)
        -:  263:   {
    #####:  264:      return -1;
        -:  265:   }
        -:  266:
        -:  267:   //play card
    #####:  268:   if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:   {
    #####:  270:      return -1;
        -:  271:   }
        -:  272:
        -:  273:   //reduce number of actions
    #####:  274:   state->numActions--;
        -:  275:
        -:  276:   //update coins (Treasure cards may be added with card draws)
    #####:  277:   updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:   return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:   int who;
        -:  285:   if (DEBUG)
        -:  286:   {
        -:  287:      printf("Entering buyCard...\n");
        -:  288:   }
        -:  289:
        -:  290:   // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:   who = state->whoseTurn;
        -:  293:
    #####:  294:   if (state->numBuys < 1)
        -:  295:   {
        -:  296:      if (DEBUG)
        -:  297:         printf("You do not have any buys left\n");
    #####:  298:      return -1;
        -:  299:   }
    #####:  300:   else if (supplyCount(supplyPos, state) < 1)
        -:  301:   {
        -:  302:      if (DEBUG)
        -:  303:         printf("There are not any of that type of card left\n");
    #####:  304:      return -1;
        -:  305:   }
    #####:  306:   else if (state->coins < getCost(supplyPos))
        -:  307:   {
        -:  308:      if (DEBUG)
        -:  309:         printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:      return -1;
        -:  311:   }
        -:  312:   else
        -:  313:   {
    #####:  314:      state->phase = 1;
        -:  315:      //state->supplyCount[supplyPos]--;
    #####:  316:      gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:      state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:      state->numBuys--;
        -:  320:      if (DEBUG)
        -:  321:         printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:   }
        -:  323:
        -:  324:   //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:   //state->discardCount[who]++;
        -:  326:
    #####:  327:   return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:   return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:   int currentPlayer = whoseTurn(state);
    #####:  338:   return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:   return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:   int i;
    #####:  349:   int count = 0;
        -:  350:
    #####:  351:   for (i = 0; i < state->deckCount[player]; i++)
        -:  352:   {
    #####:  353:      if (state->deck[player][i] == card) count++;
        -:  354:   }
        -:  355:
    #####:  356:   for (i = 0; i < state->handCount[player]; i++)
        -:  357:   {
    #####:  358:      if (state->hand[player][i] == card) count++;
        -:  359:   }
        -:  360:
    #####:  361:   for (i = 0; i < state->discardCount[player]; i++)
        -:  362:   {
    #####:  363:      if (state->discard[player][i] == card) count++;
        -:  364:   }
        -:  365:
    #####:  366:   return count;
        -:  367:}
        -:  368:
     5000:  369:int whoseTurn(struct gameState *state)
        -:  370:{
     5000:  371:   return state->whoseTurn;
        -:  372:}
        -:  373:
    #####:  374:int endTurn(struct gameState *state)
        -:  375:{
        -:  376:   int k;
        -:  377:   int i;
    #####:  378:   int currentPlayer = whoseTurn(state);
        -:  379:
        -:  380:   //Discard hand
    #####:  381:   for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  382:   {
    #####:  383:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  384:      state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  385:   }
    #####:  386:   state->handCount[currentPlayer] = 0;//Reset hand count
        -:  387:
        -:  388:   //Code for determining the player
    #####:  389:   if (currentPlayer < (state->numPlayers - 1))
        -:  390:   {
    #####:  391:      state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  392:   }
        -:  393:   else
        -:  394:   {
    #####:  395:      state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  396:   }
        -:  397:
    #####:  398:   state->outpostPlayed = 0;
    #####:  399:   state->phase = 0;
    #####:  400:   state->numActions = 1;
    #####:  401:   state->coins = 0;
    #####:  402:   state->numBuys = 1;
    #####:  403:   state->playedCardCount = 0;
    #####:  404:   state->handCount[state->whoseTurn] = 0;
        -:  405:
        -:  406:   //int k; move to top
        -:  407:   //Next player draws hand
    #####:  408:   for (k = 0; k < 5; k++)
        -:  409:   {
    #####:  410:      drawCard(state->whoseTurn, state);//Draw a card
        -:  411:   }
        -:  412:
        -:  413:   //Update money
    #####:  414:   updateCoins(state->whoseTurn, state, 0);
        -:  415:
    #####:  416:   return 0;
        -:  417:}
        -:  418:
    #####:  419:int isGameOver(struct gameState *state)
        -:  420:{
        -:  421:   int i;
        -:  422:   int j;
        -:  423:
        -:  424:   //if stack of Province cards is empty, the game ends
    #####:  425:   if (state->supplyCount[province] == 0)
        -:  426:   {
    #####:  427:      return 1;
        -:  428:   }
        -:  429:
        -:  430:   //if three supply pile are at 0, the game ends
    #####:  431:   j = 0;
    #####:  432:   for (i = 0; i < 25; i++)
        -:  433:   {
    #####:  434:      if (state->supplyCount[i] == 0)
        -:  435:      {
    #####:  436:         j++;
        -:  437:      }
        -:  438:   }
    #####:  439:   if (j >= 3)
        -:  440:   {
    #####:  441:      return 1;
        -:  442:   }
        -:  443:
    #####:  444:   return 0;
        -:  445:}
        -:  446:
    #####:  447:int scoreFor(int player, struct gameState *state)
        -:  448:{
        -:  449:
        -:  450:   int i;
    #####:  451:   int score = 0;
        -:  452:   //score from hand
    #####:  453:   for (i = 0; i < state->handCount[player]; i++)
        -:  454:   {
    #####:  455:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  456:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  457:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  458:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  459:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  460:      if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  461:   }
        -:  462:
        -:  463:   //score from discard
    #####:  464:   for (i = 0; i < state->discardCount[player]; i++)
        -:  465:   {
    #####:  466:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  467:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  468:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  469:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  470:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  471:      if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  472:   }
        -:  473:
        -:  474:   //score from deck
    #####:  475:   for (i = 0; i < state->discardCount[player]; i++)
        -:  476:   {
    #####:  477:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  478:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  479:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  480:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  481:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  482:      if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  483:   }
        -:  484:
    #####:  485:   return score;
        -:  486:}
        -:  487:
    #####:  488:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  489:{
        -:  490:   int i;
        -:  491:   int j;
        -:  492:   int highScore;
        -:  493:   int currentPlayer;
        -:  494:
        -:  495:   //get score for each player
    #####:  496:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:   {
        -:  498:      //set unused player scores to -9999
    #####:  499:      if (i >= state->numPlayers)
        -:  500:      {
    #####:  501:         players[i] = -9999;
        -:  502:      }
        -:  503:      else
        -:  504:      {
    #####:  505:         players[i] = scoreFor(i, state);
        -:  506:      }
        -:  507:   }
        -:  508:
        -:  509:   //find highest score
    #####:  510:   j = 0;
    #####:  511:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:   {
    #####:  513:      if (players[i] > players[j])
        -:  514:      {
    #####:  515:         j = i;
        -:  516:      }
        -:  517:   }
    #####:  518:   highScore = players[j];
        -:  519:
        -:  520:   //add 1 to players who had less turns
    #####:  521:   currentPlayer = whoseTurn(state);
    #####:  522:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  523:   {
    #####:  524:      if (players[i] == highScore && i > currentPlayer)
        -:  525:      {
    #####:  526:         players[i]++;
        -:  527:      }
        -:  528:   }
        -:  529:
        -:  530:   //find new highest score
    #####:  531:   j = 0;
    #####:  532:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  533:   {
    #####:  534:      if (players[i] > players[j])
        -:  535:      {
    #####:  536:         j = i;
        -:  537:      }
        -:  538:   }
    #####:  539:   highScore = players[j];
        -:  540:
        -:  541:   //set winners in array to 1 and rest to 0
    #####:  542:   for (i = 0; i < MAX_PLAYERS; i++)
        -:  543:   {
    #####:  544:      if (players[i] == highScore)
        -:  545:      {
    #####:  546:         players[i] = 1;
        -:  547:      }
        -:  548:      else
        -:  549:      {
    #####:  550:         players[i] = 0;
        -:  551:      }
        -:  552:   }
        -:  553:
    #####:  554:   return 0;
        -:  555:}
        -:  556:
    35000:  557:int drawCard(int player, struct gameState *state)
        -:  558:{
        -:  559:   int count;
        -:  560:   int deckCounter;
    35000:  561:   if (state->deckCount[player] <= 0)
        -:  562:   {//Deck is empty
        -:  563:
        -:  564://Step 1 Shuffle the discard pile back into a deck
        -:  565:      int i;
        -:  566:      //Move discard to deck
    #####:  567:      for (i = 0; i < state->discardCount[player]; i++)
        -:  568:      {
    #####:  569:         state->deck[player][i] = state->discard[player][i];
    #####:  570:         state->discard[player][i] = -1;
        -:  571:      }
        -:  572:
    #####:  573:      state->deckCount[player] = state->discardCount[player];
    #####:  574:      state->discardCount[player] = 0;//Reset discard
        -:  575:
        -:  576:      //Shufffle the deck
    #####:  577:      shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  578:
        -:  579:      if (DEBUG)
        -:  580:      {//Debug statements
        -:  581:         printf("Deck count now: %d\n", state->deckCount[player]);
        -:  582:      }
        -:  583:
    #####:  584:      state->discardCount[player] = 0;
        -:  585:
        -:  586:      //Step 2 Draw Card
    #####:  587:      count = state->handCount[player];//Get current player's hand count
        -:  588:
        -:  589:      if (DEBUG)
        -:  590:      {//Debug statements
        -:  591:         printf("Current hand count: %d\n", count);
        -:  592:      }
        -:  593:
    #####:  594:      deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  595:
    #####:  596:      if (deckCounter == 0)
    #####:  597:         return -1;
        -:  598:
    #####:  599:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  600:      state->deckCount[player]--;
    #####:  601:      state->handCount[player]++;//Increment hand count
        -:  602:   }
        -:  603:
        -:  604:   else
        -:  605:   {
    35000:  606:      int count = state->handCount[player];//Get current hand count for player
        -:  607:      int deckCounter;
        -:  608:      if (DEBUG)
        -:  609:      {//Debug statements
        -:  610:         printf("Current hand count: %d\n", count);
        -:  611:      }
        -:  612:
    35000:  613:      deckCounter = state->deckCount[player];//Create holder for the deck count
    35000:  614:      state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    35000:  615:      state->deckCount[player]--;
    35000:  616:      state->handCount[player]++;//Increment hand count
        -:  617:   }
        -:  618:
    35000:  619:   return 0;
        -:  620:}
        -:  621:
    #####:  622:int getCost(int cardNumber)
        -:  623:{
    #####:  624:   switch (cardNumber)
        -:  625:   {
        -:  626:      case curse:
    #####:  627:         return 0;
        -:  628:      case estate:
    #####:  629:         return 2;
        -:  630:      case duchy:
    #####:  631:         return 5;
        -:  632:      case province:
    #####:  633:         return 8;
        -:  634:      case copper:
    #####:  635:         return 0;
        -:  636:      case silver:
    #####:  637:         return 3;
        -:  638:      case gold:
    #####:  639:         return 6;
        -:  640:      case adventurer:
    #####:  641:         return 6;
        -:  642:      case council_room:
    #####:  643:         return 5;
        -:  644:      case feast:
    #####:  645:         return 4;
        -:  646:      case gardens:
    #####:  647:         return 4;
        -:  648:      case mine:
    #####:  649:         return 5;
        -:  650:      case remodel:
    #####:  651:         return 4;
        -:  652:      case smithy:
    #####:  653:         return 4;
        -:  654:      case village:
    #####:  655:         return 3;
        -:  656:      case baron:
    #####:  657:         return 4;
        -:  658:      case great_hall:
    #####:  659:         return 3;
        -:  660:      case minion:
    #####:  661:         return 5;
        -:  662:      case steward:
    #####:  663:         return 3;
        -:  664:      case tribute:
    #####:  665:         return 5;
        -:  666:      case ambassador:
    #####:  667:         return 3;
        -:  668:      case cutpurse:
    #####:  669:         return 4;
        -:  670:      case embargo:
    #####:  671:         return 2;
        -:  672:      case outpost:
    #####:  673:         return 5;
        -:  674:      case salvager:
    #####:  675:         return 4;
        -:  676:      case sea_hag:
    #####:  677:         return 4;
        -:  678:      case treasure_map:
    #####:  679:         return 4;
        -:  680:   }
        -:  681:
    #####:  682:   return -1;
        -:  683:}
        -:  684:
     5000:  685:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  686:{
        -:  687:   int i;
        -:  688:   int j;
        -:  689:   int k;
        -:  690:   int x;
        -:  691:   int index;
     5000:  692:   int currentPlayer = whoseTurn(state);
     5000:  693:   int nextPlayer = currentPlayer + 1;
        -:  694:
     5000:  695:   int tributeRevealedCards[2] = { -1, -1 };
        -:  696:   int temphand[MAX_HAND];// moved above the if statement
        -:  697: //  int drawntreasure=0;
        -:  698: //  int cardDrawn;
        -:  699: //  int z = 0;// this is the counter for the temp hand
     5000:  700:   if (nextPlayer > (state->numPlayers - 1))
        -:  701:   {
    #####:  702:      nextPlayer = 0;
        -:  703:   }
        -:  704:
        -:  705:
        -:  706:   //uses switch to select card and perform actions
     5000:  707:   switch (card)
        -:  708:   {
        -:  709:      case adventurer:
    #####:  710:         adventurer_card(state, handPos, bonus, currentPlayer);
    #####:  711:         return 0;
        -:  712:
        -:  713:      case council_room:
    #####:  714:         council_room_card(state, handPos, currentPlayer);
    #####:  715:         return 0;
        -:  716:
        -:  717:      case feast:
        -:  718:         //gain card with cost up to 5
        -:  719:         //Backup hand
    #####:  720:         for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  721:         {
    #####:  722:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:         }
        -:  725:         //Backup hand
        -:  726:
        -:  727:         //Update Coins for Buy
    #####:  728:         updateCoins(currentPlayer, state, 5);
    #####:  729:         x = 1;//Condition to loop on
    #####:  730:         while (x == 1)
        -:  731:         {//Buy one card
    #####:  732:            if (supplyCount(choice1, state) <= 0)
        -:  733:            {
        -:  734:               if (DEBUG)
        -:  735:                  printf("None of that card left, sorry!\n");
        -:  736:
        -:  737:               if (DEBUG)
        -:  738:               {
        -:  739:                  printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  740:               }
        -:  741:            }
    #####:  742:            else if (state->coins < getCost(choice1))
        -:  743:            {
    #####:  744:               printf("That card is too expensive!\n");
        -:  745:
        -:  746:               if (DEBUG)
        -:  747:               {
        -:  748:                  printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  749:               }
        -:  750:            }
        -:  751:            else
        -:  752:            {
        -:  753:
        -:  754:               if (DEBUG)
        -:  755:               {
        -:  756:                  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:               }
        -:  758:
    #####:  759:               gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  760:               x = 0;//No more buying cards
        -:  761:
        -:  762:               if (DEBUG)
        -:  763:               {
        -:  764:                  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  765:               }
        -:  766:
        -:  767:            }
        -:  768:         }
        -:  769:
        -:  770:         //Reset Hand
    #####:  771:         for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  772:         {
    #####:  773:            state->hand[currentPlayer][i] = temphand[i];
    #####:  774:            temphand[i] = -1;
        -:  775:         }
        -:  776:         //Reset Hand
        -:  777:
    #####:  778:         return 0;
        -:  779:
        -:  780:      case gardens:
    #####:  781:         return -1;
        -:  782:
        -:  783:      case mine:
    #####:  784:         j = mine_card(state, currentPlayer, choice1, choice2, handPos);
        -:  785:
    #####:  786:         return j;
        -:  787:
        -:  788:      case remodel:
    #####:  789:         j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:         if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  792:         {
    #####:  793:            return -1;
        -:  794:         }
        -:  795:
    #####:  796:         gainCard(choice2, state, 0, currentPlayer);
        -:  797:
        -:  798:         //discard card from hand
    #####:  799:         discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:         //discard trashed card
    #####:  802:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  803:         {
    #####:  804:            if (state->hand[currentPlayer][i] == j)
        -:  805:            {
    #####:  806:               discardCard(i, currentPlayer, state, 0);
    #####:  807:               break;
        -:  808:            }
        -:  809:         }
        -:  810:
        -:  811:
    #####:  812:         return 0;
        -:  813:
        -:  814:      case smithy:
     5000:  815:         smithy_card(state, currentPlayer, handPos);
        -:  816:
     5000:  817:         return 0;
        -:  818:
        -:  819:      case village:
    #####:  820:         village_card(state, currentPlayer, handPos);
        -:  821:
    #####:  822:         return 0;
        -:  823:
        -:  824:      case baron:
    #####:  825:         state->numBuys++;//Increase buys by 1!
    #####:  826:         if (choice1 > 0)
        -:  827:         {//Boolean true or going to discard an estate
    #####:  828:            int p = 0;//Iterator for hand!
    #####:  829:            int card_not_discarded = 1;//Flag for discard set!
    #####:  830:            while (card_not_discarded)
        -:  831:            {
    #####:  832:               if (state->hand[currentPlayer][p] == estate)
        -:  833:               {//Found an estate card!
    #####:  834:                  state->coins += 4;//Add 4 coins to the amount of coins
    #####:  835:                  state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  836:                  state->discardCount[currentPlayer]++;
    #####:  837:                  for (; p < state->handCount[currentPlayer]; p++)
        -:  838:                  {
    #####:  839:                     state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  840:                  }
    #####:  841:                  state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:                  state->handCount[currentPlayer]--;
    #####:  843:                  card_not_discarded = 0;//Exit the loop
        -:  844:               }
    #####:  845:               else if (p > state->handCount[currentPlayer])
        -:  846:               {
        -:  847:                  if (DEBUG)
        -:  848:                  {
        -:  849:                     printf("No estate cards in your hand, invalid choice\n");
        -:  850:                     printf("Must gain an estate if there are any\n");
        -:  851:                  }
    #####:  852:                  if (supplyCount(estate, state) > 0)
        -:  853:                  {
    #####:  854:                     gainCard(estate, state, 0, currentPlayer);
    #####:  855:                     state->supplyCount[estate]--;//Decrement estates
    #####:  856:                     if (supplyCount(estate, state) == 0)
        -:  857:                     {
    #####:  858:                        isGameOver(state);
        -:  859:                     }
        -:  860:                  }
    #####:  861:                  card_not_discarded = 0;//Exit the loop
        -:  862:               }
        -:  863:
        -:  864:               else
        -:  865:               {
    #####:  866:                  p++;//Next card
        -:  867:               }
        -:  868:            }
        -:  869:         }
        -:  870:
        -:  871:         else
        -:  872:         {
    #####:  873:            if (supplyCount(estate, state) > 0)
        -:  874:            {
    #####:  875:               gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  876:               state->supplyCount[estate]--;//Decrement Estates
    #####:  877:               if (supplyCount(estate, state) == 0)
        -:  878:               {
    #####:  879:                  isGameOver(state);
        -:  880:               }
        -:  881:            }
        -:  882:         }
        -:  883:
        -:  884:
    #####:  885:         return 0;
        -:  886:
        -:  887:      case great_hall:
        -:  888:         //+1 Card
    #####:  889:         drawCard(currentPlayer, state);
        -:  890:
        -:  891:         //+1 Actions
    #####:  892:         state->numActions++;
        -:  893:
        -:  894:         //discard card from hand
    #####:  895:         discardCard(handPos, currentPlayer, state, 0);
    #####:  896:         return 0;
        -:  897:
        -:  898:      case minion:
        -:  899:         //+1 action
    #####:  900:         state->numActions++;
        -:  901:
        -:  902:         //discard card from hand
    #####:  903:         discardCard(handPos, currentPlayer, state, 0);
        -:  904:
    #####:  905:         if (choice1)		//+2 coins
        -:  906:         {
    #####:  907:            state->coins = state->coins + 2;
        -:  908:         }
        -:  909:
    #####:  910:         else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  911:         {
        -:  912:            //discard hand
    #####:  913:            while (numHandCards(state) > 0)
        -:  914:            {
    #####:  915:               discardCard(handPos, currentPlayer, state, 0);
        -:  916:            }
        -:  917:
        -:  918:            //draw 4
    #####:  919:            for (i = 0; i < 4; i++)
        -:  920:            {
    #####:  921:               drawCard(currentPlayer, state);
        -:  922:            }
        -:  923:
        -:  924:            //other players discard hand and redraw if hand size > 4
    #####:  925:            for (i = 0; i < state->numPlayers; i++)
        -:  926:            {
    #####:  927:               if (i != currentPlayer)
        -:  928:               {
    #####:  929:                  if (state->handCount[i] > 4)
        -:  930:                  {
        -:  931:                     //discard hand
    #####:  932:                     while (state->handCount[i] > 0)
        -:  933:                     {
    #####:  934:                        discardCard(handPos, i, state, 0);
        -:  935:                     }
        -:  936:
        -:  937:                     //draw 4
    #####:  938:                     for (j = 0; j < 4; j++)
        -:  939:                     {
    #####:  940:                        drawCard(i, state);
        -:  941:                     }
        -:  942:                  }
        -:  943:               }
        -:  944:            }
        -:  945:
        -:  946:         }
    #####:  947:         return 0;
        -:  948:
        -:  949:      case steward:
    #####:  950:         if (choice1 == 1)
        -:  951:         {
        -:  952:            //+2 cards
    #####:  953:            drawCard(currentPlayer, state);
    #####:  954:            drawCard(currentPlayer, state);
        -:  955:         }
    #####:  956:         else if (choice1 == 2)
        -:  957:         {
        -:  958:            //+2 coins
    #####:  959:            state->coins = state->coins + 2;
        -:  960:         }
        -:  961:         else
        -:  962:         {
        -:  963:            //trash 2 cards in hand
    #####:  964:            discardCard(choice2, currentPlayer, state, 1);
    #####:  965:            discardCard(choice3, currentPlayer, state, 1);
        -:  966:         }
        -:  967:
        -:  968:         //discard card from hand
    #####:  969:         discardCard(handPos, currentPlayer, state, 0);
    #####:  970:         return 0;
        -:  971:
        -:  972:      case tribute:
    #####:  973:         if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -:  974:         {
    #####:  975:            if (state->deckCount[nextPlayer] > 0)
        -:  976:            {
    #####:  977:               tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  978:               state->deckCount[nextPlayer]--;
        -:  979:            }
    #####:  980:            else if (state->discardCount[nextPlayer] > 0)
        -:  981:            {
    #####:  982:               tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  983:               state->discardCount[nextPlayer]--;
        -:  984:            }
        -:  985:            else
        -:  986:            {
        -:  987:               //No Card to Reveal
        -:  988:               if (DEBUG)
        -:  989:               {
        -:  990:                  printf("No cards to reveal\n");
        -:  991:               }
        -:  992:            }
        -:  993:         }
        -:  994:
        -:  995:         else
        -:  996:         {
    #####:  997:            if (state->deckCount[nextPlayer] == 0)
        -:  998:            {
    #####:  999:               for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1000:               {
    #####: 1001:                  state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1002:                  state->deckCount[nextPlayer]++;
    #####: 1003:                  state->discard[nextPlayer][i] = -1;
    #####: 1004:                  state->discardCount[nextPlayer]--;
        -: 1005:               }
        -: 1006:
    #####: 1007:               shuffle(nextPlayer, state);//Shuffle the deck
        -: 1008:            }
    #####: 1009:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1010:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1011:            state->deckCount[nextPlayer]--;
    #####: 1012:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1013:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1014:            state->deckCount[nextPlayer]--;
        -: 1015:         }
        -: 1016:
    #####: 1017:         if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1018:         {//If we have a duplicate card, just drop one 
    #####: 1019:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1020:            state->playedCardCount++;
    #####: 1021:            tributeRevealedCards[1] = -1;
        -: 1022:         }
        -: 1023:
    #####: 1024:         for (i = 0; i <= 2; i++)
        -: 1025:         {
    #####: 1026:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1027:            {//Treasure cards
    #####: 1028:               state->coins += 2;
        -: 1029:            }
        -: 1030:
    #####: 1031:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1032:            {//Victory Card Found
    #####: 1033:               drawCard(currentPlayer, state);
    #####: 1034:               drawCard(currentPlayer, state);
        -: 1035:            }
        -: 1036:            else
        -: 1037:            {//Action Card
    #####: 1038:               state->numActions = state->numActions + 2;
        -: 1039:            }
        -: 1040:         }
        -: 1041:
    #####: 1042:         return 0;
        -: 1043:
        -: 1044:      case ambassador:
    #####: 1045:         j = 0;		//used to check if player has enough cards to discard
        -: 1046:
    #####: 1047:         if (choice2 > 2 || choice2 < 0)
        -: 1048:         {
    #####: 1049:            return -1;
        -: 1050:         }
        -: 1051:
    #####: 1052:         if (choice1 == handPos)
        -: 1053:         {
    #####: 1054:            return -1;
        -: 1055:         }
        -: 1056:
    #####: 1057:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:         {
    #####: 1059:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1060:            {
    #####: 1061:               j++;
        -: 1062:            }
        -: 1063:         }
    #####: 1064:         if (j < choice2)
        -: 1065:         {
    #####: 1066:            return -1;
        -: 1067:         }
        -: 1068:
        -: 1069:         if (DEBUG)
        -: 1070:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1071:
        -: 1072:         //increase supply count for choosen card by amount being discarded
    #####: 1073:         state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1074:
        -: 1075:         //each other player gains a copy of revealed card
    #####: 1076:         for (i = 0; i < state->numPlayers; i++)
        -: 1077:         {
    #####: 1078:            if (i != currentPlayer)
        -: 1079:            {
    #####: 1080:               gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1081:            }
        -: 1082:         }
        -: 1083:
        -: 1084:         //discard played card from hand
    #####: 1085:         discardCard(handPos, currentPlayer, state, 0);
        -: 1086:
        -: 1087:         //trash copies of cards returned to supply
    #####: 1088:         for (j = 0; j < choice2; j++)
        -: 1089:         {
    #####: 1090:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:            {
    #####: 1092:               if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1093:               {
    #####: 1094:                  discardCard(i, currentPlayer, state, 1);
    #####: 1095:                  break;
        -: 1096:               }
        -: 1097:            }
        -: 1098:         }
        -: 1099:
    #####: 1100:         return 0;
        -: 1101:
        -: 1102:      case cutpurse:
        -: 1103:
    #####: 1104:         updateCoins(currentPlayer, state, 2);
    #####: 1105:         for (i = 0; i < state->numPlayers; i++)
        -: 1106:         {
    #####: 1107:            if (i != currentPlayer)
        -: 1108:            {
    #####: 1109:               for (j = 0; j < state->handCount[i]; j++)
        -: 1110:               {
    #####: 1111:                  if (state->hand[i][j] == copper)
        -: 1112:                  {
    #####: 1113:                     discardCard(j, i, state, 0);
    #####: 1114:                     break;
        -: 1115:                  }
    #####: 1116:                  if (j == state->handCount[i])
        -: 1117:                  {
    #####: 1118:                     for (k = 0; k < state->handCount[i]; k++)
        -: 1119:                     {
        -: 1120:                        if (DEBUG)
        -: 1121:                           printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1122:                     }
    #####: 1123:                     break;
        -: 1124:                  }
        -: 1125:               }
        -: 1126:
        -: 1127:            }
        -: 1128:
        -: 1129:         }
        -: 1130:
        -: 1131:         //discard played card from hand
    #####: 1132:         discardCard(handPos, currentPlayer, state, 0);
        -: 1133:
    #####: 1134:         return 0;
        -: 1135:
        -: 1136:
        -: 1137:      case embargo:
        -: 1138:         //+2 Coins
    #####: 1139:         state->coins = state->coins + 2;
        -: 1140:
        -: 1141:         //see if selected pile is in play
    #####: 1142:         if (state->supplyCount[choice1] == -1)
        -: 1143:         {
    #####: 1144:            return -1;
        -: 1145:         }
        -: 1146:
        -: 1147:         //add embargo token to selected supply pile
    #####: 1148:         state->embargoTokens[choice1]++;
        -: 1149:
        -: 1150:         //trash card
    #####: 1151:         discardCard(handPos, currentPlayer, state, 1);
    #####: 1152:         return 0;
        -: 1153:
        -: 1154:      case outpost:
        -: 1155:         //set outpost flag
    #####: 1156:         state->outpostPlayed++;
        -: 1157:
        -: 1158:         //discard card
    #####: 1159:         discardCard(handPos, currentPlayer, state, 0);
    #####: 1160:         return 0;
        -: 1161:
        -: 1162:      case salvager:
        -: 1163:         //+1 buy
    #####: 1164:         state->numBuys++;
        -: 1165:
    #####: 1166:         if (choice1)
        -: 1167:         {
        -: 1168:            //gain coins equal to trashed card
    #####: 1169:            state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1170:            //trash card
    #####: 1171:            discardCard(choice1, currentPlayer, state, 1);
        -: 1172:         }
        -: 1173:
        -: 1174:         //discard card
    #####: 1175:         discardCard(handPos, currentPlayer, state, 0);
    #####: 1176:         return 0;
        -: 1177:
        -: 1178:      case sea_hag:
    #####: 1179:         for (i = 0; i < state->numPlayers; i++)
        -: 1180:         {
    #####: 1181:            if (i != currentPlayer)
        -: 1182:            {
    #####: 1183:               state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1184:               state->discardCount[i]++;
    #####: 1185:               state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1186:            }
        -: 1187:         }
    #####: 1188:         return 0;
        -: 1189:
        -: 1190:      case treasure_map:
        -: 1191:         //search hand for another treasure_map
    #####: 1192:         index = -1;
    #####: 1193:         for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1194:         {
    #####: 1195:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1196:            {
    #####: 1197:               index = i;
    #####: 1198:               break;
        -: 1199:            }
        -: 1200:         }
    #####: 1201:         if (index > -1)
        -: 1202:         {
        -: 1203:            //trash both treasure cards
    #####: 1204:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1205:            discardCard(index, currentPlayer, state, 1);
        -: 1206:
        -: 1207:            //gain 4 Gold cards
    #####: 1208:            for (i = 0; i < 4; i++)
        -: 1209:            {
    #####: 1210:               gainCard(gold, state, 1, currentPlayer);
        -: 1211:            }
        -: 1212:
        -: 1213:            //return success
    #####: 1214:            return 1;
        -: 1215:         }
        -: 1216:
        -: 1217:         //no second treasure_map found in hand
    #####: 1218:         return -1;
        -: 1219:   }
        -: 1220:
    #####: 1221:   return -1;
        -: 1222:}
        -: 1223:
     5000: 1224:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1225:{
        -: 1226:
        -: 1227:   //if card is not trashed, added to Played pile 
     5000: 1228:   if (trashFlag < 1)
        -: 1229:   {
        -: 1230:      //add card to played pile
     5000: 1231:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     5000: 1232:      state->playedCardCount++;
        -: 1233:   }
        -: 1234:
        -: 1235:   //set played card to -1
     5000: 1236:   state->hand[currentPlayer][handPos] = -1;
        -: 1237:
        -: 1238:   //remove card from player's hand
     5000: 1239:   if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1240:   {
        -: 1241:      //reduce number of cards in hand
    #####: 1242:      state->handCount[currentPlayer]--;
        -: 1243:   }
     5000: 1244:   else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1245:   {
        -: 1246:      //reduce number of cards in hand
    #####: 1247:      state->handCount[currentPlayer]--;
        -: 1248:   }
        -: 1249:   else
        -: 1250:   {
        -: 1251:      //replace discarded card with last card in hand
     5000: 1252:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1253:      //set last card to -1
     5000: 1254:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1255:      //reduce number of cards in hand
     5000: 1256:      state->handCount[currentPlayer]--;
        -: 1257:   }
        -: 1258:
     5000: 1259:   return 0;
        -: 1260:}
        -: 1261:
    #####: 1262:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1263:{
        -: 1264:   //Note: supplyPos is enum of choosen card
        -: 1265:
        -: 1266:   //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1267:   if (supplyCount(supplyPos, state) < 1)
        -: 1268:   {
    #####: 1269:      return -1;
        -: 1270:   }
        -: 1271:
        -: 1272:   //added card for [whoseTurn] current player:
        -: 1273:   // toFlag = 0 : add to discard
        -: 1274:   // toFlag = 1 : add to deck
        -: 1275:   // toFlag = 2 : add to hand
        -: 1276:
    #####: 1277:   if (toFlag == 1)
        -: 1278:   {
    #####: 1279:      state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1280:      state->deckCount[player]++;
        -: 1281:   }
    #####: 1282:   else if (toFlag == 2)
        -: 1283:   {
    #####: 1284:      state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1285:      state->handCount[player]++;
        -: 1286:   }
        -: 1287:   else
        -: 1288:   {
    #####: 1289:      state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1290:      state->discardCount[player]++;
        -: 1291:   }
        -: 1292:
        -: 1293:   //decrease number in supply pile
    #####: 1294:   state->supplyCount[supplyPos]--;
        -: 1295:
    #####: 1296:   return 0;
        -: 1297:}
        -: 1298:
     5000: 1299:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1300:{
        -: 1301:   int i;
        -: 1302:
        -: 1303:   //reset coin count
     5000: 1304:   state->coins = 0;
        -: 1305:
        -: 1306:   //add coins for each Treasure card in player's hand
    30000: 1307:   for (i = 0; i < state->handCount[player]; i++)
        -: 1308:   {
    25000: 1309:      if (state->hand[player][i] == copper)
        -: 1310:      {
    17586: 1311:         state->coins += 1;
        -: 1312:      }
     7414: 1313:      else if (state->hand[player][i] == silver)
        -: 1314:      {
    #####: 1315:         state->coins += 2;
        -: 1316:      }
     7414: 1317:      else if (state->hand[player][i] == gold)
        -: 1318:      {
    #####: 1319:         state->coins += 3;
        -: 1320:      }
        -: 1321:   }
        -: 1322:
        -: 1323:   //add bonus
     5000: 1324:   state->coins += bonus;
        -: 1325:
     5000: 1326:   return 0;
        -: 1327:}
        -: 1328:
        -: 1329:
        -: 1330://end of dominion.c
        -: 1331:
        -: 1332:// Start of refactored statements
        -: 1333:// Adventurer is first
    #####: 1334:int adventurer_card(struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -: 1335:{
        -: 1336:   int temphand[MAX_HAND];
    #####: 1337:   int drawntreasure = 0;
    #####: 1338:   int z = 0;
        -: 1339:   int cardDrawn;
        -: 1340:
        -: 1341:   //while(drawntreasure < 2)
    #####: 1342:   while (drawntreasure < 3)
        -: 1343:   {
    #####: 1344:      if (state->deckCount[currentPlayer] < 1)
        -: 1345:      {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1346:         shuffle(currentPlayer, state);
        -: 1347:      }
    #####: 1348:      drawCard(currentPlayer, state);
    #####: 1349:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1350:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1351:      {
    #####: 1352:         drawntreasure++;
        -: 1353:      }
        -: 1354:      else
        -: 1355:      {
    #####: 1356:         temphand[z] = cardDrawn;
    #####: 1357:         state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1358:         z++;
        -: 1359:      }
        -: 1360:   }
    #####: 1361:   while (z - 1 >= 0)
        -: 1362:   {
    #####: 1363:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1364:      z = z - 1;
        -: 1365:   }
    #####: 1366:   return 0;
        -: 1367:}
        -: 1368:
        -: 1369:// Council Room Card
    #####: 1370:int council_room_card(struct gameState *state, int handPos, int currentPlayer)
        -: 1371:{
    #####: 1372:   for (int i = 0; i < 4; i++)
        -: 1373:   {
    #####: 1374:      drawCard(currentPlayer, state);
        -: 1375:   }
        -: 1376:
        -: 1377:   //+1 Buy
    #####: 1378:   state->numBuys++;
    #####: 1379:   state->numBuys++;
        -: 1380:
        -: 1381:   //Each other player draws a card
    #####: 1382:   for (int i = 0; i < state->numPlayers; i++)
        -: 1383:   {
    #####: 1384:      if (i != currentPlayer)
        -: 1385:      {
    #####: 1386:         drawCard(i, state);
        -: 1387:      }
        -: 1388:   }
        -: 1389:
        -: 1390:   //put played card in played card pile
    #####: 1391:   discardCard(handPos, currentPlayer, state, 0);
        -: 1392:
    #####: 1393:   return 0;
        -: 1394:}
        -: 1395:
        -: 1396:// Mine Card
    #####: 1397:int mine_card(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1398:{
        -: 1399:   int j;
    #####: 1400:   j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1401:
    #####: 1402:   if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1403:   {
    #####: 1404:      return -1;
        -: 1405:   }
        -: 1406:
    #####: 1407:   if (choice2 > treasure_map || choice2 < curse)
        -: 1408:   {
    #####: 1409:      return -1;
        -: 1410:   }
        -: 1411:
        -: 1412:   //if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####: 1413:   if ((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2))
        -: 1414:   {
    #####: 1415:      return -1;
        -: 1416:   }
        -: 1417:
    #####: 1418:   gainCard(choice2, state, 2, currentPlayer);
        -: 1419:
        -: 1420:   //discard card from hand
    #####: 1421:   discardCard(handPos, currentPlayer, state, 0);
        -: 1422:
        -: 1423:   //discard trashed card
    #####: 1424:   for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1425:   {
    #####: 1426:      if (state->hand[currentPlayer][i] == j)
        -: 1427:      {
    #####: 1428:         discardCard(i, currentPlayer, state, 0);
    #####: 1429:         break;
        -: 1430:      }
        -: 1431:   }
        -: 1432:
    #####: 1433:   return 0;
        -: 1434:}
        -: 1435:
        -: 1436:// Refactored Smithy
     5000: 1437:int smithy_card(struct gameState *state, int currentPlayer, int handPos)
        -: 1438:{
        -: 1439:   //+3 Cards
        -: 1440:   //for (int i = 0; i < 3; i++)
    15000: 1441:   for (int i = 0; i < 2; i++)
        -: 1442:   {
    10000: 1443:      drawCard(currentPlayer, state);
        -: 1444:   }
        -: 1445:
        -: 1446:   //discard card from hand
     5000: 1447:   discardCard(handPos, currentPlayer, state, 0);
        -: 1448:
     5000: 1449:   return 0;
        -: 1450:}
        -: 1451:
        -: 1452:// Refactored Village
    #####: 1453:int village_card(struct gameState *state, int currentPlayer, int handPos)
        -: 1454:{
        -: 1455:   //+1 Card
    #####: 1456:   drawCard(currentPlayer, state);
        -: 1457:
        -: 1458:   //+2 Actions
    #####: 1459:   state->numActions = state->numActions + 2;
        -: 1460:
        -: 1461:   //discard played card from hand
    #####: 1462:   discardCard(handPos, currentPlayer, state, 0);
        -: 1463:
    #####: 1464:   return 0;
        -: 1465:}
